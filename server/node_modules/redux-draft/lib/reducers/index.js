'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _immutable = require('immutable');

var _draftJs = require('draft-js');

var _ActionTypes = require('../constants/ActionTypes');

var _isEntityActive = require('../utils/isEntityActive');

var _isEntityActive2 = _interopRequireDefault(_isEntityActive);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var getBlockRenderMap = function getBlockRenderMap(customBlockMap) {
  var customBlockRenderMap = (0, _immutable.Map)(Object.keys(customBlockMap).reduce(function (map, blockName) {
    map[blockName] = {
      element: 'div'
    };
    return map;
  }, {
    // 'paragraph': {
    //   element: 'div',
    // },
    'unstyled': {
      element: 'div'
    },
    'atomic': {
      element: 'div'
    }
  }));
  var mergedRenderMap = _draftJs.DefaultDraftBlockRenderMap.merge(customBlockRenderMap);

  return mergedRenderMap;
};

var getActiveMap = function getActiveMap(_ref) {
  var editorState = _ref.editorState,
      blockNames = _ref.blockNames,
      styleNames = _ref.styleNames,
      decoratorNames = _ref.decoratorNames;

  var selectionState = editorState.getSelection();
  var currentBlockType = editorState.getCurrentContent().getBlockForKey(selectionState.getStartKey()).getType();
  var currentStyleNames = editorState.getCurrentInlineStyle();
  var blockActiveMap = blockNames.reduce(function (map, blockName) {
    map[blockName] = blockName === currentBlockType;
    return map;
  }, {});
  var styleActiveMap = styleNames.reduce(function (map, styleName) {
    map[styleName] = currentStyleNames.has(styleName);
    return map;
  }, {});
  var entityActiveMap = decoratorNames.reduce(function (map, decoratorName) {
    map[decoratorName] = (0, _isEntityActive2.default)(editorState, decoratorName);
    return map;
  }, {});

  return _extends({}, blockActiveMap, styleActiveMap, entityActiveMap);
};

var initialEditorState = {};
var editorReducer = function editorReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialEditorState;
  var action = arguments[1];

  switch (action.type) {
    case _ActionTypes.INIT:
      {
        var config = action.config,
            markInitialized = action.markInitialized;
        var rawContent = config.rawContent,
            _config$customStyleMa = config.customStyleMap,
            customStyleMap = _config$customStyleMa === undefined ? {} : _config$customStyleMa,
            _config$customBlockMa = config.customBlockMap,
            customBlockMap = _config$customBlockMa === undefined ? {} : _config$customBlockMa,
            _config$entityMap = config.entityMap,
            entityMap = _config$entityMap === undefined ? {} : _config$entityMap,
            _config$decoratorMap = config.decoratorMap,
            decoratorMap = _config$decoratorMap === undefined ? {} : _config$decoratorMap,
            _config$renderMap = config.renderMap,
            renderMap = _config$renderMap === undefined ? {} : _config$renderMap;

        var defaultStyleNames = Object.keys(_draftJs.DefaultDraftInlineStyle);
        var styleNames = [].concat(_toConsumableArray(defaultStyleNames), _toConsumableArray(Object.keys(customStyleMap || [])));
        var defaultBlockNames = _draftJs.DefaultDraftBlockRenderMap.keySeq().toArray();
        var editorStateFromRaw = null;

        if (rawContent) {
          editorStateFromRaw = _draftJs.EditorState.createWithContent((0, _draftJs.convertFromRaw)(rawContent));
        }

        var editorState = action.editorState || editorStateFromRaw || _draftJs.EditorState.createEmpty();
        var blockRenderMap = getBlockRenderMap(customBlockMap);
        var blockRendererFn = function blockRendererFn(contentBlock) {
          var name = contentBlock.getType();

          return customBlockMap[name];
        };
        var blockNames = blockRenderMap.keySeq().toArray();
        var entityNames = Object.keys(entityMap);
        var decoratorNames = Object.keys(decoratorMap);
        var decorators = decoratorNames.map(function (decoratorName) {
          return decoratorMap[decoratorName];
        });

        editorState = _draftJs.EditorState.set(editorState, {
          decorator: new _draftJs.CompositeDecorator(decorators)
        });
        return {
          // private redux-draft props
          _instance: null,
          _initialized: markInitialized,

          // public redux-draft props
          name: action.editorName,
          config: config,
          defaultStyleNames: defaultStyleNames,
          styleNames: styleNames,
          defaultBlockNames: defaultBlockNames,
          blockNames: blockNames,
          entityNames: entityNames,
          decoratorNames: decoratorNames,
          decorators: decorators,
          activeMap: getActiveMap({
            editorState: editorState,
            blockNames: blockNames,
            styleNames: styleNames,
            decoratorNames: decoratorNames
          }),
          renderMap: renderMap,

          // draft props
          editorState: editorState,
          customStyleMap: customStyleMap,
          blockRenderMap: blockRenderMap,
          blockRendererFn: blockRendererFn,
          readOnly: false
        };
      }

    case _ActionTypes.SET_REF:
      {
        return _extends({}, state, {
          _instance: action.editorInstance
        });
      }

    case _ActionTypes.UPDATE_EDITOR_STATE:
      {
        var _blockNames = state.blockNames,
            _styleNames = state.styleNames,
            _decoratorNames = state.decoratorNames;
        var _editorState = action.editorState;


        return _extends({}, state, {
          editorState: _editorState,
          activeMap: getActiveMap({
            editorState: _editorState,
            blockNames: _blockNames,
            styleNames: _styleNames,
            decoratorNames: _decoratorNames
          })
        });
      }

    case _ActionTypes.UPDATE_EDITOR_STATE_FROM_RAW:
      {
        var _blockNames2 = state.blockNames,
            _styleNames2 = state.styleNames,
            _decoratorNames2 = state.decoratorNames,
            _decorators = state.decorators;
        var _rawContent = action.rawContent;

        var contentState = (0, _draftJs.convertFromRaw)(_rawContent);
        var _editorState2 = _draftJs.EditorState.createWithContent(contentState, new _draftJs.CompositeDecorator(_decorators));

        return _extends({}, state, {
          editorState: _editorState2,
          activeMap: getActiveMap({
            editorState: _editorState2,
            blockNames: _blockNames2,
            styleNames: _styleNames2,
            decoratorNames: _decoratorNames2
          })
        });
      }

    case _ActionTypes.UPDATE_READ_ONLY:
      {
        return _extends({}, state, {
          readOnly: action.readOnly
        });
      }

    case _ActionTypes.TOGGLE_BLOCK:
      {
        var _blockNames3 = state.blockNames,
            _styleNames3 = state.styleNames,
            _decoratorNames3 = state.decoratorNames;

        var _editorState3 = _draftJs.RichUtils.toggleBlockType(state.editorState, action.blockName);

        return _extends({}, state, {
          editorState: _editorState3,
          activeMap: getActiveMap({
            editorState: _editorState3,
            blockNames: _blockNames3,
            styleNames: _styleNames3,
            decoratorNames: _decoratorNames3
          })
        });
      }

    case _ActionTypes.TOGGLE_STYLE:
      {
        var _blockNames4 = state.blockNames,
            _styleNames4 = state.styleNames,
            _decoratorNames4 = state.decoratorNames;

        var _editorState4 = _draftJs.RichUtils.toggleInlineStyle(state.editorState, action.styleName);

        return _extends({}, state, {
          editorState: _editorState4,
          activeMap: getActiveMap({
            editorState: _editorState4,
            blockNames: _blockNames4,
            styleNames: _styleNames4,
            decoratorNames: _decoratorNames4
          })
        });
      }

    case _ActionTypes.APPLY_BLOCK:
      {
        var _editorState5 = state.editorState,
            _blockNames5 = state.blockNames,
            _styleNames5 = state.styleNames,
            _decoratorNames5 = state.decoratorNames;

        var _contentState = _editorState5.getCurrentContent();
        var selectionState = _editorState5.getSelection();
        var setBlock = _draftJs.Modifier.setBlockType(_contentState, selectionState, action.blockName);

        _contentState = _draftJs.EditorState.push(_editorState5, setBlock, 'change-block-type');
        _editorState5 = _draftJs.EditorState.forceSelection(_contentState, setBlock.getSelectionAfter());
        return _extends({}, state, {
          editorState: _editorState5,
          activeMap: getActiveMap({
            editorState: _editorState5,
            blockNames: _blockNames5,
            styleNames: _styleNames5,
            decoratorNames: _decoratorNames5
          })
        });
      }

    case _ActionTypes.REMOVE_ENTITY:
      {
        var _editorState6 = state.editorState,
            _blockNames6 = state.blockNames,
            _styleNames6 = state.styleNames,
            _decoratorNames6 = state.decoratorNames;

        var _selectionState = _editorState6.getSelection();
        var _contentState2 = _editorState6.getCurrentContent();
        var contentStateWithoutEntity = _draftJs.Modifier.applyEntity(_contentState2, _selectionState, null);
        _editorState6 = _draftJs.EditorState.push(_editorState6, contentStateWithoutEntity, 'apply-entity');

        return _extends({}, state, {
          editorState: _editorState6,
          activeMap: getActiveMap({
            editorState: _editorState6,
            blockNames: _blockNames6,
            styleNames: _styleNames6,
            decoratorNames: _decoratorNames6
          })
        });
      }

    case _ActionTypes.APPLY_ENTITY:
      {
        var _editorState7 = state.editorState,
            _blockNames7 = state.blockNames,
            _styleNames7 = state.styleNames,
            _decoratorNames7 = state.decoratorNames;

        var _selectionState2 = _editorState7.getSelection();
        var _contentState3 = _editorState7.getCurrentContent();

        var contentStateWithNewEntity = _contentState3.createEntity(action.entityName, action.mutability, action.data);
        var entityKey = contentStateWithNewEntity.getLastCreatedEntityKey();
        var contentStateWithEntity = _draftJs.Modifier.applyEntity(contentStateWithNewEntity, _selectionState2, entityKey);
        _editorState7 = _draftJs.EditorState.push(_editorState7, contentStateWithEntity, 'apply-entity');

        return _extends({}, state, {
          editorState: _editorState7,
          activeMap: getActiveMap({
            editorState: _editorState7,
            blockNames: _blockNames7,
            styleNames: _styleNames7,
            decoratorNames: _decoratorNames7
          })
        });
      }

    case _ActionTypes.INSERT_ENTITY:
      {
        var _editorState8 = state.editorState,
            _blockNames8 = state.blockNames,
            _styleNames8 = state.styleNames,
            _decoratorNames8 = state.decoratorNames;

        var _selectionState3 = _editorState8.getSelection();
        var _contentState4 = _editorState8.getCurrentContent();

        var _contentStateWithNewEntity = _contentState4.createEntity(action.entityName, action.mutability, action.data);
        var _entityKey = _contentStateWithNewEntity.getLastCreatedEntityKey();

        var firstBlank = _draftJs.Modifier.insertText(_contentState4, _selectionState3, ' ', null, null);
        var withEntity = _draftJs.Modifier.insertText(firstBlank, _selectionState3, action.text, null, _entityKey);
        var withBlank = _draftJs.Modifier.insertText(withEntity, _selectionState3, ' ', null, null);

        _editorState8 = _draftJs.EditorState.push(_editorState8, withBlank, 'insert-text');

        return _extends({}, state, {
          editorState: _editorState8,
          activeMap: getActiveMap({
            editorState: _editorState8,
            blockNames: _blockNames8,
            styleNames: _styleNames8,
            decoratorNames: _decoratorNames8
          })
        });
      }

    case _ActionTypes.INSERT_ATOMIC_BLOCK:
      {
        var _editorState9 = state.editorState,
            _blockNames9 = state.blockNames,
            _styleNames9 = state.styleNames,
            _decoratorNames9 = state.decoratorNames;

        var _contentState5 = _editorState9.getCurrentContent();
        var _contentStateWithNewEntity2 = _contentState5.createEntity(action.entityName, action.mutability, action.data);
        var _entityKey2 = _contentStateWithNewEntity2.getLastCreatedEntityKey();

        _editorState9 = _draftJs.EditorState.set(_editorState9, { currentContent: _contentStateWithNewEntity2 });
        _editorState9 = _draftJs.AtomicBlockUtils.insertAtomicBlock(_editorState9, _entityKey2, action.text);
        return _extends({}, state, {
          editorState: _editorState9,
          activeMap: getActiveMap({
            editorState: _editorState9,
            blockNames: _blockNames9,
            styleNames: _styleNames9,
            decoratorNames: _decoratorNames9
          })
        });
      }

    case _ActionTypes.REMOVE_BLOCK:
      {
        var _editorState10 = state.editorState;

        var _contentState6 = _editorState10.getCurrentContent();
        var block = _contentState6.getBlockForKey(action.blockKey);
        var targetRange = new _draftJs.SelectionState({
          anchorKey: action.blockKey,
          anchorOffset: 0,
          focusKey: action.blockKey,
          focusOffset: block.getLength()
        });
        var withoutBlock = _draftJs.Modifier.removeRange(_contentState6, targetRange, 'backward');
        var resetBlock = _draftJs.Modifier.setBlockType(withoutBlock, withoutBlock.getSelectionAfter(), 'unstyled');

        _contentState6 = _draftJs.EditorState.push(_editorState10, resetBlock, 'remove-range');
        _editorState10 = _draftJs.EditorState.forceSelection(_contentState6, resetBlock.getSelectionAfter());
        return _extends({}, state, {
          editorState: _editorState10
        });
      }

    case _ActionTypes.UPDATE_ENTITY_DATA:
      {
        var _editorState11 = state.editorState,
            _decorators2 = state.decorators;

        var _contentState7 = _editorState11.getCurrentContent();
        _contentState7 = _contentState7.mergeEntityData(action.entityKey, action.data);
        _editorState11 = _draftJs.EditorState.createWithContent(_contentState7, new _draftJs.CompositeDecorator(_decorators2));

        return _extends({}, state, {
          editorState: _editorState11
        });
      }
  }
};

var initialState = {};

exports.default = function () {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments[1];
  var editorName = action.editorName;


  if (editorName) {
    return _extends({}, state, _defineProperty({}, editorName, editorReducer(state[editorName], action)));
  } else {
    return state;
  }
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
