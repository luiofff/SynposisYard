"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getEntityAtCursor;
function getEntityAtOffset(block, offset) {
  var entityKey = block.getEntityAt(offset);
  if (entityKey == null) {
    return null;
  }
  var startOffset = offset;
  while (startOffset > 0 && block.getEntityAt(startOffset - 1) === entityKey) {
    startOffset -= 1;
  }
  var endOffset = startOffset;
  var blockLength = block.getLength();
  while (endOffset < blockLength && block.getEntityAt(endOffset + 1) === entityKey) {
    endOffset += 1;
  }
  return {
    entityKey: entityKey,
    blockKey: block.getKey(),
    startOffset: startOffset,
    endOffset: endOffset + 1
  };
}

function getEntityAtCursor(editorState) {
  var selection = editorState.getSelection();
  var startKey = selection.getStartKey();
  var startBlock = editorState.getCurrentContent().getBlockForKey(startKey);
  var startOffset = selection.getStartOffset();
  if (selection.isCollapsed()) {
    // Get the entity before the cursor (unless the cursor is at the start).
    return getEntityAtOffset(startBlock, startOffset === 0 ? startOffset : startOffset - 1);
  }
  if (startKey !== selection.getEndKey()) {
    return null;
  }
  var endOffset = selection.getEndOffset();
  var startEntityKey = startBlock.getEntityAt(startOffset);
  for (var i = startOffset; i < endOffset; i++) {
    var entityKey = startBlock.getEntityAt(i);
    if (entityKey == null || entityKey !== startEntityKey) {
      return null;
    }
  }
  return {
    entityKey: startEntityKey,
    blockKey: startBlock.getKey(),
    startOffset: startOffset,
    endOffset: endOffset
  };
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzL2dldEVudGl0eUF0Q3Vyc29yLmpzIl0sIm5hbWVzIjpbImdldEVudGl0eUF0Q3Vyc29yIiwiZ2V0RW50aXR5QXRPZmZzZXQiLCJibG9jayIsIm9mZnNldCIsImVudGl0eUtleSIsImdldEVudGl0eUF0Iiwic3RhcnRPZmZzZXQiLCJlbmRPZmZzZXQiLCJibG9ja0xlbmd0aCIsImdldExlbmd0aCIsImJsb2NrS2V5IiwiZ2V0S2V5IiwiZWRpdG9yU3RhdGUiLCJzZWxlY3Rpb24iLCJnZXRTZWxlY3Rpb24iLCJzdGFydEtleSIsImdldFN0YXJ0S2V5Iiwic3RhcnRCbG9jayIsImdldEN1cnJlbnRDb250ZW50IiwiZ2V0QmxvY2tGb3JLZXkiLCJnZXRTdGFydE9mZnNldCIsImlzQ29sbGFwc2VkIiwiZ2V0RW5kS2V5IiwiZ2V0RW5kT2Zmc2V0Iiwic3RhcnRFbnRpdHlLZXkiLCJpIl0sIm1hcHBpbmdzIjoiOzs7OztrQkF3QndCQSxpQjtBQXhCeEIsU0FBU0MsaUJBQVQsQ0FBMkJDLEtBQTNCLEVBQWtDQyxNQUFsQyxFQUEwQztBQUN4QyxNQUFJQyxZQUFZRixNQUFNRyxXQUFOLENBQWtCRixNQUFsQixDQUFoQjtBQUNBLE1BQUlDLGFBQWEsSUFBakIsRUFBdUI7QUFDckIsV0FBTyxJQUFQO0FBQ0Q7QUFDRCxNQUFJRSxjQUFjSCxNQUFsQjtBQUNBLFNBQU9HLGNBQWMsQ0FBZCxJQUFtQkosTUFBTUcsV0FBTixDQUFrQkMsY0FBYyxDQUFoQyxNQUF1Q0YsU0FBakUsRUFBNEU7QUFDMUVFLG1CQUFlLENBQWY7QUFDRDtBQUNELE1BQUlDLFlBQVlELFdBQWhCO0FBQ0EsTUFBSUUsY0FBY04sTUFBTU8sU0FBTixFQUFsQjtBQUNBLFNBQ0VGLFlBQVlDLFdBQVosSUFBMkJOLE1BQU1HLFdBQU4sQ0FBa0JFLFlBQVksQ0FBOUIsTUFBcUNILFNBRGxFLEVBRUU7QUFDQUcsaUJBQWEsQ0FBYjtBQUNEO0FBQ0QsU0FBTztBQUNMSCx3QkFESztBQUVMTSxjQUFVUixNQUFNUyxNQUFOLEVBRkw7QUFHTEwsNEJBSEs7QUFJTEMsZUFBV0EsWUFBWTtBQUpsQixHQUFQO0FBTUQ7O0FBRWMsU0FBU1AsaUJBQVQsQ0FBMkJZLFdBQTNCLEVBQXdDO0FBQ3JELE1BQUlDLFlBQVlELFlBQVlFLFlBQVosRUFBaEI7QUFDQSxNQUFJQyxXQUFXRixVQUFVRyxXQUFWLEVBQWY7QUFDQSxNQUFJQyxhQUFhTCxZQUFZTSxpQkFBWixHQUFnQ0MsY0FBaEMsQ0FBK0NKLFFBQS9DLENBQWpCO0FBQ0EsTUFBSVQsY0FBY08sVUFBVU8sY0FBVixFQUFsQjtBQUNBLE1BQUlQLFVBQVVRLFdBQVYsRUFBSixFQUE2QjtBQUMzQjtBQUNBLFdBQU9wQixrQkFDTGdCLFVBREssRUFFTFgsZ0JBQWdCLENBQWhCLEdBQW9CQSxXQUFwQixHQUFrQ0EsY0FBYyxDQUYzQyxDQUFQO0FBSUQ7QUFDRCxNQUFJUyxhQUFhRixVQUFVUyxTQUFWLEVBQWpCLEVBQXdDO0FBQ3RDLFdBQU8sSUFBUDtBQUNEO0FBQ0QsTUFBSWYsWUFBWU0sVUFBVVUsWUFBVixFQUFoQjtBQUNBLE1BQUlDLGlCQUFpQlAsV0FBV1osV0FBWCxDQUF1QkMsV0FBdkIsQ0FBckI7QUFDQSxPQUFLLElBQUltQixJQUFJbkIsV0FBYixFQUEwQm1CLElBQUlsQixTQUE5QixFQUF5Q2tCLEdBQXpDLEVBQThDO0FBQzVDLFFBQUlyQixZQUFZYSxXQUFXWixXQUFYLENBQXVCb0IsQ0FBdkIsQ0FBaEI7QUFDQSxRQUFJckIsYUFBYSxJQUFiLElBQXFCQSxjQUFjb0IsY0FBdkMsRUFBdUQ7QUFDckQsYUFBTyxJQUFQO0FBQ0Q7QUFDRjtBQUNELFNBQU87QUFDTHBCLGVBQVdvQixjQUROO0FBRUxkLGNBQVVPLFdBQVdOLE1BQVgsRUFGTDtBQUdMTCxpQkFBYUEsV0FIUjtBQUlMQyxlQUFXQTtBQUpOLEdBQVA7QUFNRCIsImZpbGUiOiJ1dGlscy9nZXRFbnRpdHlBdEN1cnNvci5qcyIsInNvdXJjZVJvb3QiOiJFOlxccHJvamVjdHNcXHJlZHV4LWRyYWZ0XFxzcmMifQ==
